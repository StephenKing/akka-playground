akka {
  loglevel = "DEBUG"
  loggers = ["akka.testkit.TestEventListener"]

  actor {
    provider = cluster

    deployment {
      /number-producer/consumer-router {
        router = round-robin-pool
        routees.paths = ["/user/number-consumer"]
        cluster {
          enabled = on
          allow-local-routees = on
          use-role = consumer
        }
      }
    }
  }

  remote {
    enabled-transports = ["akka.remote.netty.tcp"]
    netty.tcp {
      hostname = "127.0.0.1"
      # hostname = ${?HOST}
      port = 2551
      # port = ${?PORT}
    }
  }

  cluster {
    # must be overriden using parameter
    # seed-nodes = [
    #   "akka.tcp://number-actors@127.0.0.1:2551"
    # ]

    # must be overriden using parameter
    # roles = ["seed"]

    role {
      seed.min-nr-of-members = 1
    }
  }
}

kamon {
  akka {
    actor-groups = [ "group-of-actors", "group-of-routees" ]
  }


  metric {
    instrument-factory.custom-settings {
      "akka.actor.mailbox-size" {
        sample-interval = 1 millisecond
      }

      "akka.group.members" {
        sample-interval = 1 millisecond
      }
    }
  }

  util {
    filters = {
      "akka.actor" {
        includes = [ "*/user/**" ]
        excludes = [ "*/user/tracked-explicitly-excluded", "*/user/non-tracked-actor" ]
      }

      "akka.router" {
        includes = [ "*/user/**" ]
        excludes = [ "*/user/tracked-explicitly-excluded-*"]
      }

      "akka.dispatcher" {
        includes = [ "*/user/**" ]
        excludes = [ "explicitly-excluded" ]
      }

      group-of-actors {
        includes = ["*/user/group-of-actors-*"]
        excludes = []
      }

      group-of-routees {
        includes = ["*/user/group-of-routees*"]
        excludes = []
      }
    }

  }

  default-instrument-settings {
    gauge.refresh-interval = 1 hour
    min-max-counter.refresh-interval = 1 hour
  }

  instrument-settings {
    akka-actor.mailbox-size.refresh-interval = 1 hour
  }
}

kamon.prometheus {

  # Enable or disable publishing the Prometheus scraping enpoint using a embedded server.
  start-embedded-http-server = yes

  buckets {
    default-buckets = [
      10,
      30,
      100,
      300,
      1000,
      3000,
      10000,
      30000,
      100000
    ]

    time-buckets = [
      0.005,
      0.01,
      0.025,
      0.05,
      0.075,
      0.1,
      0.25,
      0.5,
      0.75,
      1,
      2.5,
      5,
      7.5,
      10
    ]

    information-buckets = [
      512,
      1024,
      2048,
      4096,
      16384,
      65536,
      524288,
      1048576
    ]
  }


  embedded-server {

    # Hostname and port used by the embedded web server to publish the scraping enpoint.
    hostname = 0.0.0.0
    port = 9095
  }

}
kamon {
  jaeger {
    host = "localhost"
    port = 5775
  }
}